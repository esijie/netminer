//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SominerServerMonitor.DistriGather {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="cTaskData", Namespace="http://schemas.datacontract.org/2004/07/SoukeySplitService")]
    [System.SerializableAttribute()]
    public partial class cTaskData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int ErrCountk__BackingFieldField;
        
        private int GatherUrlCountk__BackingFieldField;
        
        private long TaskIDk__BackingFieldField;
        
        private string TaskNamek__BackingFieldField;
        
        private NetMiner.Resource.cGlobalParas.TaskState TaskStatek__BackingFieldField;
        
        private int UrlCountk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ErrCount>k__BackingField", IsRequired=true)]
        public int ErrCountk__BackingField {
            get {
                return this.ErrCountk__BackingFieldField;
            }
            set {
                if ((this.ErrCountk__BackingFieldField.Equals(value) != true)) {
                    this.ErrCountk__BackingFieldField = value;
                    this.RaisePropertyChanged("ErrCountk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<GatherUrlCount>k__BackingField", IsRequired=true)]
        public int GatherUrlCountk__BackingField {
            get {
                return this.GatherUrlCountk__BackingFieldField;
            }
            set {
                if ((this.GatherUrlCountk__BackingFieldField.Equals(value) != true)) {
                    this.GatherUrlCountk__BackingFieldField = value;
                    this.RaisePropertyChanged("GatherUrlCountk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TaskID>k__BackingField", IsRequired=true)]
        public long TaskIDk__BackingField {
            get {
                return this.TaskIDk__BackingFieldField;
            }
            set {
                if ((this.TaskIDk__BackingFieldField.Equals(value) != true)) {
                    this.TaskIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("TaskIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TaskName>k__BackingField", IsRequired=true)]
        public string TaskNamek__BackingField {
            get {
                return this.TaskNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNamek__BackingFieldField, value) != true)) {
                    this.TaskNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("TaskNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TaskState>k__BackingField", IsRequired=true)]
        public NetMiner.Resource.cGlobalParas.TaskState TaskStatek__BackingField {
            get {
                return this.TaskStatek__BackingFieldField;
            }
            set {
                if ((this.TaskStatek__BackingFieldField.Equals(value) != true)) {
                    this.TaskStatek__BackingFieldField = value;
                    this.RaisePropertyChanged("TaskStatek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UrlCount>k__BackingField", IsRequired=true)]
        public int UrlCountk__BackingField {
            get {
                return this.UrlCountk__BackingFieldField;
            }
            set {
                if ((this.UrlCountk__BackingFieldField.Equals(value) != true)) {
                    this.UrlCountk__BackingFieldField = value;
                    this.RaisePropertyChanged("UrlCountk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.netminer.cn", ConfigurationName="DistriGather.iGather")]
    public interface iGather {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.netminer.cn/iGather/isConnect", ReplyAction="http://www.netminer.cn/iGather/isConnectResponse")]
        bool isConnect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.netminer.cn/iGather/StartTask", ReplyAction="http://www.netminer.cn/iGather/StartTaskResponse")]
        bool StartTask(string TaskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.netminer.cn/iGather/StopTask", ReplyAction="http://www.netminer.cn/iGather/StopTaskResponse")]
        bool StopTask(long tID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.netminer.cn/iGather/DelTask", ReplyAction="http://www.netminer.cn/iGather/DelTaskResponse")]
        bool DelTask(long tID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.netminer.cn/iGather/ResetTask", ReplyAction="http://www.netminer.cn/iGather/ResetTaskResponse")]
        bool ResetTask(long tID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.netminer.cn/iGather/GetTaskState", ReplyAction="http://www.netminer.cn/iGather/GetTaskStateResponse")]
        int GetTaskState(long tID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.netminer.cn/iGather/GetTaskList", ReplyAction="http://www.netminer.cn/iGather/GetTaskListResponse")]
        SominerServerMonitor.DistriGather.cTaskData[] GetTaskList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.netminer.cn/iGather/GetTaskRunList", ReplyAction="http://www.netminer.cn/iGather/GetTaskRunListResponse")]
        SominerServerMonitor.DistriGather.cTaskData[] GetTaskRunList();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface iGatherChannel : SominerServerMonitor.DistriGather.iGather, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class iGatherClient : System.ServiceModel.ClientBase<SominerServerMonitor.DistriGather.iGather>, SominerServerMonitor.DistriGather.iGather {
        
        public iGatherClient() {
        }
        
        public iGatherClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public iGatherClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iGatherClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iGatherClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool isConnect() {
            return base.Channel.isConnect();
        }
        
        public bool StartTask(string TaskName) {
            return base.Channel.StartTask(TaskName);
        }
        
        public bool StopTask(long tID) {
            return base.Channel.StopTask(tID);
        }
        
        public bool DelTask(long tID) {
            return base.Channel.DelTask(tID);
        }
        
        public bool ResetTask(long tID) {
            return base.Channel.ResetTask(tID);
        }
        
        public int GetTaskState(long tID) {
            return base.Channel.GetTaskState(tID);
        }
        
        public SominerServerMonitor.DistriGather.cTaskData[] GetTaskList() {
            return base.Channel.GetTaskList();
        }
        
        public SominerServerMonitor.DistriGather.cTaskData[] GetTaskRunList() {
            return base.Channel.GetTaskRunList();
        }
    }
}
