//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace NetMiner.Engine.localhost {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NetMinerWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class NetMinerWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ConnectServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActiveClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSplitTaskStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PushTaskResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback DealUploadZIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskPlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRunningOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSplitTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback PreUploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartGatherOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopGatherOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelMyTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogByTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelRunningTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDictOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSubTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTaskClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTaskClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelTaskClassOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NetMinerWebService() {
            this.Url = global::NetMiner.Engine.Properties.Settings.Default.SoukeyEngine_localhost_NetMinerWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ConnectServerCompletedEventHandler ConnectServerCompleted;
        
        /// <remarks/>
        public event ActiveClientCompletedEventHandler ActiveClientCompleted;
        
        /// <remarks/>
        public event GetTaskNameCompletedEventHandler GetTaskNameCompleted;
        
        /// <remarks/>
        public event GetTaskFileCompletedEventHandler GetTaskFileCompleted;
        
        /// <remarks/>
        public event UpdateSplitTaskStateCompletedEventHandler UpdateSplitTaskStateCompleted;
        
        /// <remarks/>
        public event UpdateTaskStateCompletedEventHandler UpdateTaskStateCompleted;
        
        /// <remarks/>
        public event PushTaskResultCompletedEventHandler PushTaskResultCompleted;
        
        /// <remarks/>
        public event DealUploadZIPCompletedEventHandler DealUploadZIPCompleted;
        
        /// <remarks/>
        public event GetPlanCompletedEventHandler GetPlanCompleted;
        
        /// <remarks/>
        public event UpdateTaskPlanCompletedEventHandler UpdateTaskPlanCompleted;
        
        /// <remarks/>
        public event GetRunningCompletedEventHandler GetRunningCompleted;
        
        /// <remarks/>
        public event GetTasksCompletedEventHandler GetTasksCompleted;
        
        /// <remarks/>
        public event GetSplitTaskCompletedEventHandler GetSplitTaskCompleted;
        
        /// <remarks/>
        public event ResetTaskCompletedEventHandler ResetTaskCompleted;
        
        /// <remarks/>
        public event PreUploadFileCompletedEventHandler PreUploadFileCompleted;
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event RegisterCompletedEventHandler RegisterCompleted;
        
        /// <remarks/>
        public event GetServerStateCompletedEventHandler GetServerStateCompleted;
        
        /// <remarks/>
        public event StartGatherCompletedEventHandler StartGatherCompleted;
        
        /// <remarks/>
        public event StopGatherCompletedEventHandler StopGatherCompleted;
        
        /// <remarks/>
        public event DelMyTaskCompletedEventHandler DelMyTaskCompleted;
        
        /// <remarks/>
        public event DelTaskCompletedEventHandler DelTaskCompleted;
        
        /// <remarks/>
        public event GetLogCompletedEventHandler GetLogCompleted;
        
        /// <remarks/>
        public event GetLogByTaskCompletedEventHandler GetLogByTaskCompleted;
        
        /// <remarks/>
        public event LoadDataCompletedEventHandler LoadDataCompleted;
        
        /// <remarks/>
        public event DelLogCompletedEventHandler DelLogCompleted;
        
        /// <remarks/>
        public event DelRunningTaskCompletedEventHandler DelRunningTaskCompleted;
        
        /// <remarks/>
        public event DownloadTaskCompletedEventHandler DownloadTaskCompleted;
        
        /// <remarks/>
        public event SaveTaskCompletedEventHandler SaveTaskCompleted;
        
        /// <remarks/>
        public event UploadDictCompletedEventHandler UploadDictCompleted;
        
        /// <remarks/>
        public event CheckSubTaskCompletedEventHandler CheckSubTaskCompleted;
        
        /// <remarks/>
        public event GetTaskClassCompletedEventHandler GetTaskClassCompleted;
        
        /// <remarks/>
        public event GetAllTaskClassCompletedEventHandler GetAllTaskClassCompleted;
        
        /// <remarks/>
        public event AddTaskClassCompletedEventHandler AddTaskClassCompleted;
        
        /// <remarks/>
        public event DelTaskClassCompletedEventHandler DelTaskClassCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConnectServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConnectServer(string ClientCode) {
            object[] results = this.Invoke("ConnectServer", new object[] {
                        ClientCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectServerAsync(string ClientCode) {
            this.ConnectServerAsync(ClientCode, null);
        }
        
        /// <remarks/>
        public void ConnectServerAsync(string ClientCode, object userState) {
            if ((this.ConnectServerOperationCompleted == null)) {
                this.ConnectServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectServerOperationCompleted);
            }
            this.InvokeAsync("ConnectServer", new object[] {
                        ClientCode}, this.ConnectServerOperationCompleted, userState);
        }
        
        private void OnConnectServerOperationCompleted(object arg) {
            if ((this.ConnectServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectServerCompleted(this, new ConnectServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActiveClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ActiveClient(string ClientCode) {
            object[] results = this.Invoke("ActiveClient", new object[] {
                        ClientCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ActiveClientAsync(string ClientCode) {
            this.ActiveClientAsync(ClientCode, null);
        }
        
        /// <remarks/>
        public void ActiveClientAsync(string ClientCode, object userState) {
            if ((this.ActiveClientOperationCompleted == null)) {
                this.ActiveClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActiveClientOperationCompleted);
            }
            this.InvokeAsync("ActiveClient", new object[] {
                        ClientCode}, this.ActiveClientOperationCompleted, userState);
        }
        
        private void OnActiveClientOperationCompleted(object arg) {
            if ((this.ActiveClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActiveClientCompleted(this, new ActiveClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public cRemoteTaskEntity GetTaskName(string ClientCode) {
            object[] results = this.Invoke("GetTaskName", new object[] {
                        ClientCode});
            return ((cRemoteTaskEntity)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskNameAsync(string ClientCode) {
            this.GetTaskNameAsync(ClientCode, null);
        }
        
        /// <remarks/>
        public void GetTaskNameAsync(string ClientCode, object userState) {
            if ((this.GetTaskNameOperationCompleted == null)) {
                this.GetTaskNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskNameOperationCompleted);
            }
            this.InvokeAsync("GetTaskName", new object[] {
                        ClientCode}, this.GetTaskNameOperationCompleted, userState);
        }
        
        private void OnGetTaskNameOperationCompleted(object arg) {
            if ((this.GetTaskNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskNameCompleted(this, new GetTaskNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetTaskFile(string fName) {
            object[] results = this.Invoke("GetTaskFile", new object[] {
                        fName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskFileAsync(string fName) {
            this.GetTaskFileAsync(fName, null);
        }
        
        /// <remarks/>
        public void GetTaskFileAsync(string fName, object userState) {
            if ((this.GetTaskFileOperationCompleted == null)) {
                this.GetTaskFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskFileOperationCompleted);
            }
            this.InvokeAsync("GetTaskFile", new object[] {
                        fName}, this.GetTaskFileOperationCompleted, userState);
        }
        
        private void OnGetTaskFileOperationCompleted(object arg) {
            if ((this.GetTaskFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskFileCompleted(this, new GetTaskFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSplitTaskState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateSplitTaskState(int tsID, string ClientCode, int tState, long TaskID) {
            object[] results = this.Invoke("UpdateSplitTaskState", new object[] {
                        tsID,
                        ClientCode,
                        tState,
                        TaskID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSplitTaskStateAsync(int tsID, string ClientCode, int tState, long TaskID) {
            this.UpdateSplitTaskStateAsync(tsID, ClientCode, tState, TaskID, null);
        }
        
        /// <remarks/>
        public void UpdateSplitTaskStateAsync(int tsID, string ClientCode, int tState, long TaskID, object userState) {
            if ((this.UpdateSplitTaskStateOperationCompleted == null)) {
                this.UpdateSplitTaskStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSplitTaskStateOperationCompleted);
            }
            this.InvokeAsync("UpdateSplitTaskState", new object[] {
                        tsID,
                        ClientCode,
                        tState,
                        TaskID}, this.UpdateSplitTaskStateOperationCompleted, userState);
        }
        
        private void OnUpdateSplitTaskStateOperationCompleted(object arg) {
            if ((this.UpdateSplitTaskStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSplitTaskStateCompleted(this, new UpdateSplitTaskStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTaskState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateTaskState(int tID, string ClientCode, int tState, long TaskID) {
            object[] results = this.Invoke("UpdateTaskState", new object[] {
                        tID,
                        ClientCode,
                        tState,
                        TaskID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTaskStateAsync(int tID, string ClientCode, int tState, long TaskID) {
            this.UpdateTaskStateAsync(tID, ClientCode, tState, TaskID, null);
        }
        
        /// <remarks/>
        public void UpdateTaskStateAsync(int tID, string ClientCode, int tState, long TaskID, object userState) {
            if ((this.UpdateTaskStateOperationCompleted == null)) {
                this.UpdateTaskStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskStateOperationCompleted);
            }
            this.InvokeAsync("UpdateTaskState", new object[] {
                        tID,
                        ClientCode,
                        tState,
                        TaskID}, this.UpdateTaskStateOperationCompleted, userState);
        }
        
        private void OnUpdateTaskStateOperationCompleted(object arg) {
            if ((this.UpdateTaskStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskStateCompleted(this, new UpdateTaskStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PushTaskResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PushTaskResult(string ClientCode, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string TaskName, int StartIndex) {
            object[] results = this.Invoke("PushTaskResult", new object[] {
                        ClientCode,
                        fs,
                        TaskName,
                        StartIndex});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PushTaskResultAsync(string ClientCode, byte[] fs, string TaskName, int StartIndex) {
            this.PushTaskResultAsync(ClientCode, fs, TaskName, StartIndex, null);
        }
        
        /// <remarks/>
        public void PushTaskResultAsync(string ClientCode, byte[] fs, string TaskName, int StartIndex, object userState) {
            if ((this.PushTaskResultOperationCompleted == null)) {
                this.PushTaskResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPushTaskResultOperationCompleted);
            }
            this.InvokeAsync("PushTaskResult", new object[] {
                        ClientCode,
                        fs,
                        TaskName,
                        StartIndex}, this.PushTaskResultOperationCompleted, userState);
        }
        
        private void OnPushTaskResultOperationCompleted(object arg) {
            if ((this.PushTaskResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PushTaskResultCompleted(this, new PushTaskResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DealUploadZIP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DealUploadZIP(string ClientCode, string TaskName, int tID, long TaskID, int gType) {
            object[] results = this.Invoke("DealUploadZIP", new object[] {
                        ClientCode,
                        TaskName,
                        tID,
                        TaskID,
                        gType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DealUploadZIPAsync(string ClientCode, string TaskName, int tID, long TaskID, int gType) {
            this.DealUploadZIPAsync(ClientCode, TaskName, tID, TaskID, gType, null);
        }
        
        /// <remarks/>
        public void DealUploadZIPAsync(string ClientCode, string TaskName, int tID, long TaskID, int gType, object userState) {
            if ((this.DealUploadZIPOperationCompleted == null)) {
                this.DealUploadZIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDealUploadZIPOperationCompleted);
            }
            this.InvokeAsync("DealUploadZIP", new object[] {
                        ClientCode,
                        TaskName,
                        tID,
                        TaskID,
                        gType}, this.DealUploadZIPOperationCompleted, userState);
        }
        
        private void OnDealUploadZIPOperationCompleted(object arg) {
            if ((this.DealUploadZIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DealUploadZIPCompleted(this, new DealUploadZIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPlan", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetPlan(string ClientCode) {
            object[] results = this.Invoke("GetPlan", new object[] {
                        ClientCode});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlanAsync(string ClientCode) {
            this.GetPlanAsync(ClientCode, null);
        }
        
        /// <remarks/>
        public void GetPlanAsync(string ClientCode, object userState) {
            if ((this.GetPlanOperationCompleted == null)) {
                this.GetPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlanOperationCompleted);
            }
            this.InvokeAsync("GetPlan", new object[] {
                        ClientCode}, this.GetPlanOperationCompleted, userState);
        }
        
        private void OnGetPlanOperationCompleted(object arg) {
            if ((this.GetPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlanCompleted(this, new GetPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateTaskPlan", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateTaskPlan(string ClientCode, int tID, string planXML) {
            object[] results = this.Invoke("UpdateTaskPlan", new object[] {
                        ClientCode,
                        tID,
                        planXML});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTaskPlanAsync(string ClientCode, int tID, string planXML) {
            this.UpdateTaskPlanAsync(ClientCode, tID, planXML, null);
        }
        
        /// <remarks/>
        public void UpdateTaskPlanAsync(string ClientCode, int tID, string planXML, object userState) {
            if ((this.UpdateTaskPlanOperationCompleted == null)) {
                this.UpdateTaskPlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskPlanOperationCompleted);
            }
            this.InvokeAsync("UpdateTaskPlan", new object[] {
                        ClientCode,
                        tID,
                        planXML}, this.UpdateTaskPlanOperationCompleted, userState);
        }
        
        private void OnUpdateTaskPlanOperationCompleted(object arg) {
            if ((this.UpdateTaskPlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskPlanCompleted(this, new UpdateTaskPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRunning", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public cTaskList[] GetRunning(string ClientCode) {
            object[] results = this.Invoke("GetRunning", new object[] {
                        ClientCode});
            return ((cTaskList[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRunningAsync(string ClientCode) {
            this.GetRunningAsync(ClientCode, null);
        }
        
        /// <remarks/>
        public void GetRunningAsync(string ClientCode, object userState) {
            if ((this.GetRunningOperationCompleted == null)) {
                this.GetRunningOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRunningOperationCompleted);
            }
            this.InvokeAsync("GetRunning", new object[] {
                        ClientCode}, this.GetRunningOperationCompleted, userState);
        }
        
        private void OnGetRunningOperationCompleted(object arg) {
            if ((this.GetRunningCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRunningCompleted(this, new GetRunningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTasks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public cMyTask[] GetTasks(string ClientCode) {
            object[] results = this.Invoke("GetTasks", new object[] {
                        ClientCode});
            return ((cMyTask[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksAsync(string ClientCode) {
            this.GetTasksAsync(ClientCode, null);
        }
        
        /// <remarks/>
        public void GetTasksAsync(string ClientCode, object userState) {
            if ((this.GetTasksOperationCompleted == null)) {
                this.GetTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksOperationCompleted);
            }
            this.InvokeAsync("GetTasks", new object[] {
                        ClientCode}, this.GetTasksOperationCompleted, userState);
        }
        
        private void OnGetTasksOperationCompleted(object arg) {
            if ((this.GetTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksCompleted(this, new GetTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSplitTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetSplitTask(string ClientCode, string tID) {
            object[] results = this.Invoke("GetSplitTask", new object[] {
                        ClientCode,
                        tID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetSplitTaskAsync(string ClientCode, string tID) {
            this.GetSplitTaskAsync(ClientCode, tID, null);
        }
        
        /// <remarks/>
        public void GetSplitTaskAsync(string ClientCode, string tID, object userState) {
            if ((this.GetSplitTaskOperationCompleted == null)) {
                this.GetSplitTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSplitTaskOperationCompleted);
            }
            this.InvokeAsync("GetSplitTask", new object[] {
                        ClientCode,
                        tID}, this.GetSplitTaskOperationCompleted, userState);
        }
        
        private void OnGetSplitTaskOperationCompleted(object arg) {
            if ((this.GetSplitTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSplitTaskCompleted(this, new GetSplitTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ResetTask(string ClientCode, string tID) {
            object[] results = this.Invoke("ResetTask", new object[] {
                        ClientCode,
                        tID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ResetTaskAsync(string ClientCode, string tID) {
            this.ResetTaskAsync(ClientCode, tID, null);
        }
        
        /// <remarks/>
        public void ResetTaskAsync(string ClientCode, string tID, object userState) {
            if ((this.ResetTaskOperationCompleted == null)) {
                this.ResetTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetTaskOperationCompleted);
            }
            this.InvokeAsync("ResetTask", new object[] {
                        ClientCode,
                        tID}, this.ResetTaskOperationCompleted, userState);
        }
        
        private void OnResetTaskOperationCompleted(object arg) {
            if ((this.ResetTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetTaskCompleted(this, new ResetTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PreUploadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PreUploadFile(string fileName) {
            object[] results = this.Invoke("PreUploadFile", new object[] {
                        fileName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void PreUploadFileAsync(string fileName) {
            this.PreUploadFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void PreUploadFileAsync(string fileName, object userState) {
            if ((this.PreUploadFileOperationCompleted == null)) {
                this.PreUploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreUploadFileOperationCompleted);
            }
            this.InvokeAsync("PreUploadFile", new object[] {
                        fileName}, this.PreUploadFileOperationCompleted, userState);
        }
        
        private void OnPreUploadFileOperationCompleted(object arg) {
            if ((this.PreUploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreUploadFileCompleted(this, new PreUploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadFile(string ClientCode, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string fileName, int taskClassID, bool isCover) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        ClientCode,
                        fs,
                        fileName,
                        taskClassID,
                        isCover});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(string ClientCode, byte[] fs, string fileName, int taskClassID, bool isCover) {
            this.UploadFileAsync(ClientCode, fs, fileName, taskClassID, isCover, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(string ClientCode, byte[] fs, string fileName, int taskClassID, bool isCover, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        ClientCode,
                        fs,
                        fileName,
                        taskClassID,
                        isCover}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Register", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Register(string User, string LicenceID) {
            object[] results = this.Invoke("Register", new object[] {
                        User,
                        LicenceID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterAsync(string User, string LicenceID) {
            this.RegisterAsync(User, LicenceID, null);
        }
        
        /// <remarks/>
        public void RegisterAsync(string User, string LicenceID, object userState) {
            if ((this.RegisterOperationCompleted == null)) {
                this.RegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationCompleted);
            }
            this.InvokeAsync("Register", new object[] {
                        User,
                        LicenceID}, this.RegisterOperationCompleted, userState);
        }
        
        private void OnRegisterOperationCompleted(object arg) {
            if ((this.RegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetServerState() {
            object[] results = this.Invoke("GetServerState", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerStateAsync() {
            this.GetServerStateAsync(null);
        }
        
        /// <remarks/>
        public void GetServerStateAsync(object userState) {
            if ((this.GetServerStateOperationCompleted == null)) {
                this.GetServerStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerStateOperationCompleted);
            }
            this.InvokeAsync("GetServerState", new object[0], this.GetServerStateOperationCompleted, userState);
        }
        
        private void OnGetServerStateOperationCompleted(object arg) {
            if ((this.GetServerStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerStateCompleted(this, new GetServerStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartGather", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool StartGather(long tID, int type) {
            object[] results = this.Invoke("StartGather", new object[] {
                        tID,
                        type});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void StartGatherAsync(long tID, int type) {
            this.StartGatherAsync(tID, type, null);
        }
        
        /// <remarks/>
        public void StartGatherAsync(long tID, int type, object userState) {
            if ((this.StartGatherOperationCompleted == null)) {
                this.StartGatherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartGatherOperationCompleted);
            }
            this.InvokeAsync("StartGather", new object[] {
                        tID,
                        type}, this.StartGatherOperationCompleted, userState);
        }
        
        private void OnStartGatherOperationCompleted(object arg) {
            if ((this.StartGatherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartGatherCompleted(this, new StartGatherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StopGather", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool StopGather(long TaskID) {
            object[] results = this.Invoke("StopGather", new object[] {
                        TaskID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void StopGatherAsync(long TaskID) {
            this.StopGatherAsync(TaskID, null);
        }
        
        /// <remarks/>
        public void StopGatherAsync(long TaskID, object userState) {
            if ((this.StopGatherOperationCompleted == null)) {
                this.StopGatherOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopGatherOperationCompleted);
            }
            this.InvokeAsync("StopGather", new object[] {
                        TaskID}, this.StopGatherOperationCompleted, userState);
        }
        
        private void OnStopGatherOperationCompleted(object arg) {
            if ((this.StopGatherCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopGatherCompleted(this, new StopGatherCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelMyTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DelMyTask(int tID) {
            object[] results = this.Invoke("DelMyTask", new object[] {
                        tID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DelMyTaskAsync(int tID) {
            this.DelMyTaskAsync(tID, null);
        }
        
        /// <remarks/>
        public void DelMyTaskAsync(int tID, object userState) {
            if ((this.DelMyTaskOperationCompleted == null)) {
                this.DelMyTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelMyTaskOperationCompleted);
            }
            this.InvokeAsync("DelMyTask", new object[] {
                        tID}, this.DelMyTaskOperationCompleted, userState);
        }
        
        private void OnDelMyTaskOperationCompleted(object arg) {
            if ((this.DelMyTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelMyTaskCompleted(this, new DelMyTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DelTask(long TaskID) {
            object[] results = this.Invoke("DelTask", new object[] {
                        TaskID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DelTaskAsync(long TaskID) {
            this.DelTaskAsync(TaskID, null);
        }
        
        /// <remarks/>
        public void DelTaskAsync(long TaskID, object userState) {
            if ((this.DelTaskOperationCompleted == null)) {
                this.DelTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelTaskOperationCompleted);
            }
            this.InvokeAsync("DelTask", new object[] {
                        TaskID}, this.DelTaskOperationCompleted, userState);
        }
        
        private void OnDelTaskOperationCompleted(object arg) {
            if ((this.DelTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelTaskCompleted(this, new DelTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLog(string ClientCode) {
            object[] results = this.Invoke("GetLog", new object[] {
                        ClientCode});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLogAsync(string ClientCode) {
            this.GetLogAsync(ClientCode, null);
        }
        
        /// <remarks/>
        public void GetLogAsync(string ClientCode, object userState) {
            if ((this.GetLogOperationCompleted == null)) {
                this.GetLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogOperationCompleted);
            }
            this.InvokeAsync("GetLog", new object[] {
                        ClientCode}, this.GetLogOperationCompleted, userState);
        }
        
        private void OnGetLogOperationCompleted(object arg) {
            if ((this.GetLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogCompleted(this, new GetLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLogByTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public cLogInfo[] GetLogByTask(string taskID) {
            object[] results = this.Invoke("GetLogByTask", new object[] {
                        taskID});
            return ((cLogInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLogByTaskAsync(string taskID) {
            this.GetLogByTaskAsync(taskID, null);
        }
        
        /// <remarks/>
        public void GetLogByTaskAsync(string taskID, object userState) {
            if ((this.GetLogByTaskOperationCompleted == null)) {
                this.GetLogByTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogByTaskOperationCompleted);
            }
            this.InvokeAsync("GetLogByTask", new object[] {
                        taskID}, this.GetLogByTaskOperationCompleted, userState);
        }
        
        private void OnGetLogByTaskOperationCompleted(object arg) {
            if ((this.GetLogByTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogByTaskCompleted(this, new GetLogByTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] LoadData(string TaskName, int topCount) {
            object[] results = this.Invoke("LoadData", new object[] {
                        TaskName,
                        topCount});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void LoadDataAsync(string TaskName, int topCount) {
            this.LoadDataAsync(TaskName, topCount, null);
        }
        
        /// <remarks/>
        public void LoadDataAsync(string TaskName, int topCount, object userState) {
            if ((this.LoadDataOperationCompleted == null)) {
                this.LoadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadDataOperationCompleted);
            }
            this.InvokeAsync("LoadData", new object[] {
                        TaskName,
                        topCount}, this.LoadDataOperationCompleted, userState);
        }
        
        private void OnLoadDataOperationCompleted(object arg) {
            if ((this.LoadDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadDataCompleted(this, new LoadDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DelLog(string TaskName) {
            object[] results = this.Invoke("DelLog", new object[] {
                        TaskName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DelLogAsync(string TaskName) {
            this.DelLogAsync(TaskName, null);
        }
        
        /// <remarks/>
        public void DelLogAsync(string TaskName, object userState) {
            if ((this.DelLogOperationCompleted == null)) {
                this.DelLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelLogOperationCompleted);
            }
            this.InvokeAsync("DelLog", new object[] {
                        TaskName}, this.DelLogOperationCompleted, userState);
        }
        
        private void OnDelLogOperationCompleted(object arg) {
            if ((this.DelLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelLogCompleted(this, new DelLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelRunningTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DelRunningTask(string ClientCode, string TaskID) {
            object[] results = this.Invoke("DelRunningTask", new object[] {
                        ClientCode,
                        TaskID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DelRunningTaskAsync(string ClientCode, string TaskID) {
            this.DelRunningTaskAsync(ClientCode, TaskID, null);
        }
        
        /// <remarks/>
        public void DelRunningTaskAsync(string ClientCode, string TaskID, object userState) {
            if ((this.DelRunningTaskOperationCompleted == null)) {
                this.DelRunningTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelRunningTaskOperationCompleted);
            }
            this.InvokeAsync("DelRunningTask", new object[] {
                        ClientCode,
                        TaskID}, this.DelRunningTaskOperationCompleted, userState);
        }
        
        private void OnDelRunningTaskOperationCompleted(object arg) {
            if ((this.DelRunningTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelRunningTaskCompleted(this, new DelRunningTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadTask(string TaskName) {
            object[] results = this.Invoke("DownloadTask", new object[] {
                        TaskName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadTaskAsync(string TaskName) {
            this.DownloadTaskAsync(TaskName, null);
        }
        
        /// <remarks/>
        public void DownloadTaskAsync(string TaskName, object userState) {
            if ((this.DownloadTaskOperationCompleted == null)) {
                this.DownloadTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadTaskOperationCompleted);
            }
            this.InvokeAsync("DownloadTask", new object[] {
                        TaskName}, this.DownloadTaskOperationCompleted, userState);
        }
        
        private void OnDownloadTaskOperationCompleted(object arg) {
            if ((this.DownloadTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadTaskCompleted(this, new DownloadTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveTask(string tName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs) {
            object[] results = this.Invoke("SaveTask", new object[] {
                        tName,
                        fs});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveTaskAsync(string tName, byte[] fs) {
            this.SaveTaskAsync(tName, fs, null);
        }
        
        /// <remarks/>
        public void SaveTaskAsync(string tName, byte[] fs, object userState) {
            if ((this.SaveTaskOperationCompleted == null)) {
                this.SaveTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTaskOperationCompleted);
            }
            this.InvokeAsync("SaveTask", new object[] {
                        tName,
                        fs}, this.SaveTaskOperationCompleted, userState);
        }
        
        private void OnSaveTaskOperationCompleted(object arg) {
            if ((this.SaveTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTaskCompleted(this, new SaveTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDict", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadDict(string dictClass, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs) {
            object[] results = this.Invoke("UploadDict", new object[] {
                        dictClass,
                        fs});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDictAsync(string dictClass, byte[] fs) {
            this.UploadDictAsync(dictClass, fs, null);
        }
        
        /// <remarks/>
        public void UploadDictAsync(string dictClass, byte[] fs, object userState) {
            if ((this.UploadDictOperationCompleted == null)) {
                this.UploadDictOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDictOperationCompleted);
            }
            this.InvokeAsync("UploadDict", new object[] {
                        dictClass,
                        fs}, this.UploadDictOperationCompleted, userState);
        }
        
        private void OnUploadDictOperationCompleted(object arg) {
            if ((this.UploadDictCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDictCompleted(this, new UploadDictCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckSubTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckSubTask(string clientCode, string TaskName) {
            object[] results = this.Invoke("CheckSubTask", new object[] {
                        clientCode,
                        TaskName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSubTaskAsync(string clientCode, string TaskName) {
            this.CheckSubTaskAsync(clientCode, TaskName, null);
        }
        
        /// <remarks/>
        public void CheckSubTaskAsync(string clientCode, string TaskName, object userState) {
            if ((this.CheckSubTaskOperationCompleted == null)) {
                this.CheckSubTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSubTaskOperationCompleted);
            }
            this.InvokeAsync("CheckSubTask", new object[] {
                        clientCode,
                        TaskName}, this.CheckSubTaskOperationCompleted, userState);
        }
        
        private void OnCheckSubTaskOperationCompleted(object arg) {
            if ((this.CheckSubTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSubTaskCompleted(this, new CheckSubTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskClass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetTaskClass(string ClientCode) {
            object[] results = this.Invoke("GetTaskClass", new object[] {
                        ClientCode});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskClassAsync(string ClientCode) {
            this.GetTaskClassAsync(ClientCode, null);
        }
        
        /// <remarks/>
        public void GetTaskClassAsync(string ClientCode, object userState) {
            if ((this.GetTaskClassOperationCompleted == null)) {
                this.GetTaskClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskClassOperationCompleted);
            }
            this.InvokeAsync("GetTaskClass", new object[] {
                        ClientCode}, this.GetTaskClassOperationCompleted, userState);
        }
        
        private void OnGetTaskClassOperationCompleted(object arg) {
            if ((this.GetTaskClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskClassCompleted(this, new GetTaskClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTaskClass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAllTaskClass() {
            object[] results = this.Invoke("GetAllTaskClass", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTaskClassAsync() {
            this.GetAllTaskClassAsync(null);
        }
        
        /// <remarks/>
        public void GetAllTaskClassAsync(object userState) {
            if ((this.GetAllTaskClassOperationCompleted == null)) {
                this.GetAllTaskClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTaskClassOperationCompleted);
            }
            this.InvokeAsync("GetAllTaskClass", new object[0], this.GetAllTaskClassOperationCompleted, userState);
        }
        
        private void OnGetAllTaskClassOperationCompleted(object arg) {
            if ((this.GetAllTaskClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTaskClassCompleted(this, new GetAllTaskClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddTaskClass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddTaskClass(string ClientCode, string fID, string ClassName) {
            object[] results = this.Invoke("AddTaskClass", new object[] {
                        ClientCode,
                        fID,
                        ClassName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddTaskClassAsync(string ClientCode, string fID, string ClassName) {
            this.AddTaskClassAsync(ClientCode, fID, ClassName, null);
        }
        
        /// <remarks/>
        public void AddTaskClassAsync(string ClientCode, string fID, string ClassName, object userState) {
            if ((this.AddTaskClassOperationCompleted == null)) {
                this.AddTaskClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTaskClassOperationCompleted);
            }
            this.InvokeAsync("AddTaskClass", new object[] {
                        ClientCode,
                        fID,
                        ClassName}, this.AddTaskClassOperationCompleted, userState);
        }
        
        private void OnAddTaskClassOperationCompleted(object arg) {
            if ((this.AddTaskClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTaskClassCompleted(this, new AddTaskClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelTaskClass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DelTaskClass(string ClientCode, string ID) {
            object[] results = this.Invoke("DelTaskClass", new object[] {
                        ClientCode,
                        ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DelTaskClassAsync(string ClientCode, string ID) {
            this.DelTaskClassAsync(ClientCode, ID, null);
        }
        
        /// <remarks/>
        public void DelTaskClassAsync(string ClientCode, string ID, object userState) {
            if ((this.DelTaskClassOperationCompleted == null)) {
                this.DelTaskClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelTaskClassOperationCompleted);
            }
            this.InvokeAsync("DelTaskClass", new object[] {
                        ClientCode,
                        ID}, this.DelTaskClassOperationCompleted, userState);
        }
        
        private void OnDelTaskClassOperationCompleted(object arg) {
            if ((this.DelTaskClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelTaskClassCompleted(this, new DelTaskClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class cRemoteTaskEntity {
        
        private int idField;
        
        private int tIDField;
        
        private string taskFileNameField;
        
        private string taskNameField;
        
        private int gatherTaskTypeField;
        
        private bool isSubRunField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int TID {
            get {
                return this.tIDField;
            }
            set {
                this.tIDField = value;
            }
        }
        
        /// <remarks/>
        public string TaskFileName {
            get {
                return this.taskFileNameField;
            }
            set {
                this.taskFileNameField = value;
            }
        }
        
        /// <remarks/>
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public int GatherTaskType {
            get {
                return this.gatherTaskTypeField;
            }
            set {
                this.gatherTaskTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool isSubRun {
            get {
                return this.isSubRunField;
            }
            set {
                this.isSubRunField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class cLogInfo {
        
        private int idField;
        
        private long taskIDField;
        
        private string taskNameField;
        
        private LogType lTypeField;
        
        private string strLogField;
        
        private string logDateField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public long TaskID {
            get {
                return this.taskIDField;
            }
            set {
                this.taskIDField = value;
            }
        }
        
        /// <remarks/>
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public LogType lType {
            get {
                return this.lTypeField;
            }
            set {
                this.lTypeField = value;
            }
        }
        
        /// <remarks/>
        public string strLog {
            get {
                return this.strLogField;
            }
            set {
                this.strLogField = value;
            }
        }
        
        /// <remarks/>
        public string LogDate {
            get {
                return this.logDateField;
            }
            set {
                this.logDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum LogType {
        
        /// <remarks/>
        Info,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        RunPlanTask,
        
        /// <remarks/>
        GatherError,
        
        /// <remarks/>
        PublishError,
        
        /// <remarks/>
        Start,
        
        /// <remarks/>
        Stop,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class cMyTask {
        
        private int tIDField;
        
        private string taskNameField;
        
        private string savePathField;
        
        private TaskState tStateField;
        
        private string endDateField;
        
        private int splitTaskField;
        
        /// <remarks/>
        public int TID {
            get {
                return this.tIDField;
            }
            set {
                this.tIDField = value;
            }
        }
        
        /// <remarks/>
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public string SavePath {
            get {
                return this.savePathField;
            }
            set {
                this.savePathField = value;
            }
        }
        
        /// <remarks/>
        public TaskState tState {
            get {
                return this.tStateField;
            }
            set {
                this.tStateField = value;
            }
        }
        
        /// <remarks/>
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public int SplitTask {
            get {
                return this.splitTaskField;
            }
            set {
                this.splitTaskField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum TaskState {
        
        /// <remarks/>
        UnStart,
        
        /// <remarks/>
        Started,
        
        /// <remarks/>
        Aborted,
        
        /// <remarks/>
        Waiting,
        
        /// <remarks/>
        Running,
        
        /// <remarks/>
        Pause,
        
        /// <remarks/>
        Stopped,
        
        /// <remarks/>
        Exporting,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        Publishing,
        
        /// <remarks/>
        PublishStop,
        
        /// <remarks/>
        PublishFailed,
        
        /// <remarks/>
        Request,
        
        /// <remarks/>
        WaitingPublish,
        
        /// <remarks/>
        RemoteUnstart,
        
        /// <remarks/>
        RemoteRunning,
        
        /// <remarks/>
        ErrStop,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class cTaskList {
        
        private long taskIDField;
        
        private string taskNameField;
        
        private TaskState stateField;
        
        private string startDateField;
        
        private string endDateField;
        
        private int gCountField;
        
        private int errCountField;
        
        private int doUIDField;
        
        private string savePathField;
        
        /// <remarks/>
        public long TaskID {
            get {
                return this.taskIDField;
            }
            set {
                this.taskIDField = value;
            }
        }
        
        /// <remarks/>
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public TaskState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public string EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public int gCount {
            get {
                return this.gCountField;
            }
            set {
                this.gCountField = value;
            }
        }
        
        /// <remarks/>
        public int ErrCount {
            get {
                return this.errCountField;
            }
            set {
                this.errCountField = value;
            }
        }
        
        /// <remarks/>
        public int DoUID {
            get {
                return this.doUIDField;
            }
            set {
                this.doUIDField = value;
            }
        }
        
        /// <remarks/>
        public string SavePath {
            get {
                return this.savePathField;
            }
            set {
                this.savePathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ConnectServerCompletedEventHandler(object sender, ConnectServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ActiveClientCompletedEventHandler(object sender, ActiveClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActiveClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActiveClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetTaskNameCompletedEventHandler(object sender, GetTaskNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public cRemoteTaskEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((cRemoteTaskEntity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetTaskFileCompletedEventHandler(object sender, GetTaskFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UpdateSplitTaskStateCompletedEventHandler(object sender, UpdateSplitTaskStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSplitTaskStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSplitTaskStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UpdateTaskStateCompletedEventHandler(object sender, UpdateTaskStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTaskStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTaskStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PushTaskResultCompletedEventHandler(object sender, PushTaskResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PushTaskResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PushTaskResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DealUploadZIPCompletedEventHandler(object sender, DealUploadZIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DealUploadZIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DealUploadZIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetPlanCompletedEventHandler(object sender, GetPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UpdateTaskPlanCompletedEventHandler(object sender, UpdateTaskPlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTaskPlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTaskPlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetRunningCompletedEventHandler(object sender, GetRunningCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRunningCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRunningCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public cTaskList[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((cTaskList[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetTasksCompletedEventHandler(object sender, GetTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public cMyTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((cMyTask[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetSplitTaskCompletedEventHandler(object sender, GetSplitTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSplitTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSplitTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ResetTaskCompletedEventHandler(object sender, ResetTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void PreUploadFileCompletedEventHandler(object sender, PreUploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PreUploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PreUploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void RegisterCompletedEventHandler(object sender, RegisterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetServerStateCompletedEventHandler(object sender, GetServerStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void StartGatherCompletedEventHandler(object sender, StartGatherCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartGatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartGatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void StopGatherCompletedEventHandler(object sender, StopGatherCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopGatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopGatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DelMyTaskCompletedEventHandler(object sender, DelMyTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelMyTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelMyTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DelTaskCompletedEventHandler(object sender, DelTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetLogCompletedEventHandler(object sender, GetLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetLogByTaskCompletedEventHandler(object sender, GetLogByTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogByTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogByTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public cLogInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((cLogInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void LoadDataCompletedEventHandler(object sender, LoadDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DelLogCompletedEventHandler(object sender, DelLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DelRunningTaskCompletedEventHandler(object sender, DelRunningTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelRunningTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelRunningTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DownloadTaskCompletedEventHandler(object sender, DownloadTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void SaveTaskCompletedEventHandler(object sender, SaveTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void UploadDictCompletedEventHandler(object sender, UploadDictCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDictCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDictCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CheckSubTaskCompletedEventHandler(object sender, CheckSubTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSubTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSubTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetTaskClassCompletedEventHandler(object sender, GetTaskClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetAllTaskClassCompletedEventHandler(object sender, GetAllTaskClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTaskClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTaskClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AddTaskClassCompletedEventHandler(object sender, AddTaskClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTaskClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTaskClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DelTaskClassCompletedEventHandler(object sender, DelTaskClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelTaskClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelTaskClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591